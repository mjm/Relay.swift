// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct ToDoListPaginationQuery {
    public var variables: Variables

    public init(variables: Variables) {
        self.variables = variables
    }

    public static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "ToDoListPaginationQuery",
                type: "Query",
                selections: [
                    .field(ReaderLinkedField(
                        name: "node",
                        args: [
                            VariableArgument(name: "id", variableName: "id")
                        ],
                        plural: false,
                        selections: [
                            .fragmentSpread(ReaderFragmentSpread(
                                name: "ToDoList_user",
                                args: [
                                    VariableArgument(name: "count", variableName: "count"),
                                    VariableArgument(name: "cursor", variableName: "cursor")
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            operation: NormalizationOperation(
                name: "ToDoListPaginationQuery",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "node",
                        args: [
                            VariableArgument(name: "id", variableName: "id")
                        ],
                        plural: false,
                        selections: [
                            .field(NormalizationScalarField(
                                name: "__typename"
                            )),
                            .field(NormalizationScalarField(
                                name: "id"
                            )),
                            .inlineFragment(NormalizationInlineFragment(
                                type: "User",
                                selections: [
                                    .field(NormalizationLinkedField(
                                        name: "todos",
                                        args: [
                                            VariableArgument(name: "after", variableName: "cursor"),
                                            VariableArgument(name: "first", variableName: "count")
                                        ],
                                        concreteType: "TodoConnection",
                                        plural: false,
                                        selections: [
                                            .field(NormalizationLinkedField(
                                                name: "edges",
                                                concreteType: "TodoEdge",
                                                plural: true,
                                                selections: [
                                                    .field(NormalizationLinkedField(
                                                        name: "node",
                                                        concreteType: "Todo",
                                                        plural: false,
                                                        selections: [
                                                            .field(NormalizationScalarField(
                                                                name: "id"
                                                            )),
                                                            .field(NormalizationScalarField(
                                                                name: "text"
                                                            )),
                                                            .field(NormalizationScalarField(
                                                                name: "complete"
                                                            )),
                                                            .field(NormalizationScalarField(
                                                                name: "__typename"
                                                            ))
                                                        ]
                                                    )),
                                                    .field(NormalizationScalarField(
                                                        name: "cursor"
                                                    ))
                                                ]
                                            )),
                                            .field(NormalizationLinkedField(
                                                name: "pageInfo",
                                                concreteType: "PageInfo",
                                                plural: false,
                                                selections: [
                                                    .field(NormalizationScalarField(
                                                        name: "endCursor"
                                                    )),
                                                    .field(NormalizationScalarField(
                                                        name: "hasNextPage"
                                                    ))
                                                ]
                                            ))
                                        ]
                                    )),
                                    .handle(NormalizationHandle(
                                        kind: .linked,
                                        name: "todos",
                                        args: [
                                            VariableArgument(name: "after", variableName: "cursor"),
                                            VariableArgument(name: "first", variableName: "count")
                                        ],
                                        handle: "connection",
                                        key: "ToDoList_todos"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            params: RequestParameters(
                name: "ToDoListPaginationQuery",
                operationKind: .query,
                text: """
query ToDoListPaginationQuery(
  $count: Int = 100
  $cursor: String
  $id: ID!
) {
  node(id: $id) {
    __typename
    ...ToDoList_user_1G22uz
    id
  }
}

fragment ToDoItem_todo on Todo {
  id
  text
  complete
}

fragment ToDoList_user_1G22uz on User {
  todos(first: $count, after: $cursor) {
    edges {
      node {
        id
        ...ToDoItem_todo
        __typename
      }
      cursor
    }
    pageInfo {
      endCursor
      hasNextPage
    }
  }
  id
}
"""
            )
        )
    }
}

extension ToDoListPaginationQuery {
    public struct Variables: VariableDataConvertible {
        public var count: Int?
        public var cursor: String?
        public var id: String

        public init(count: Int? = nil, cursor: String? = nil, id: String) {
            self.count = count
            self.cursor = cursor
            self.id = id
        }

        public var variableData: VariableData {
            [
                "count": count,
                "cursor": cursor,
                "id": id
            ]
        }
    }

    public init(count: Int? = nil, cursor: String? = nil, id: String) {
        self.init(variables: .init(count: count, cursor: cursor, id: id))
    }
}

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.Query.WrappedValue where O == ToDoListPaginationQuery {
    public func get(count: Int? = nil, cursor: String? = nil, id: String, fetchKey: Any? = nil) -> RelaySwiftUI.Query<ToDoListPaginationQuery>.Result {
        self.get(.init(count: count, cursor: cursor, id: id), fetchKey: fetchKey)
    }
}
#endif

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.RefetchableFragment.Wrapper where F.Operation == ToDoListPaginationQuery {
    public func refetch(count: Int? = nil, cursor: String? = nil, id: String) {
        self.refetch(.init(count: count, cursor: cursor, id: id))
    }
}
#endif

extension ToDoListPaginationQuery {
    public struct Data: Decodable {
        public var node: Node_node?

        public struct Node_node: Decodable, ToDoList_user_Key {
            public var fragment_ToDoList_user: FragmentPointer
        }
    }
}

extension ToDoListPaginationQuery: Relay.Operation {}