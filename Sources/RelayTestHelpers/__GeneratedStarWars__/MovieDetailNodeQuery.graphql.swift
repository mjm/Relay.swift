// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct MovieDetailNodeQuery {
    public var variables: Variables

    public init(variables: Variables) {
        self.variables = variables
    }

    public static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "MovieDetailNodeQuery",
                type: "Root",
                selections: [
                    .field(ReaderLinkedField(
                        name: "node",
                        args: [
                            VariableArgument(name: "id", variableName: "id")
                        ],
                        plural: false,
                        selections: [
                            .field(ReaderScalarField(
                                name: "id"
                            )),
                            .inlineFragment(ReaderInlineFragment(
                                type: "Film",
                                selections: [
                                    .field(ReaderScalarField(
                                        name: "episodeID"
                                    )),
                                    .field(ReaderScalarField(
                                        name: "title"
                                    )),
                                    .field(ReaderScalarField(
                                        name: "director"
                                    )),
                                    .field(ReaderScalarField(
                                        name: "releaseDate"
                                    )),
                                    .field(ReaderLinkedField(
                                        name: "characterConnection",
                                        storageKey: "characterConnection(first:3)",
                                        args: [
                                            LiteralArgument(name: "first", value: 3)
                                        ],
                                        concreteType: "FilmCharactersConnection",
                                        plural: false,
                                        selections: [
                                            .field(ReaderLinkedField(
                                                name: "edges",
                                                concreteType: "FilmCharactersEdge",
                                                plural: true,
                                                selections: [
                                                    .field(ReaderLinkedField(
                                                        name: "node",
                                                        concreteType: "Person",
                                                        plural: false,
                                                        selections: [
                                                            .field(ReaderScalarField(
                                                                name: "id"
                                                            )),
                                                            .field(ReaderScalarField(
                                                                name: "name"
                                                            ))
                                                        ]
                                                    ))
                                                ]
                                            ))
                                        ]
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            operation: NormalizationOperation(
                name: "MovieDetailNodeQuery",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "node",
                        args: [
                            VariableArgument(name: "id", variableName: "id")
                        ],
                        plural: false,
                        selections: [
                            .field(NormalizationScalarField(
                                name: "__typename"
                            )),
                            .field(NormalizationScalarField(
                                name: "id"
                            )),
                            .inlineFragment(NormalizationInlineFragment(
                                type: "Film",
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "episodeID"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "title"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "director"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "releaseDate"
                                    )),
                                    .field(NormalizationLinkedField(
                                        name: "characterConnection",
                                        args: [
                                            LiteralArgument(name: "first", value: 3)
                                        ],
                                        storageKey: "characterConnection(first:3)",
                                        concreteType: "FilmCharactersConnection",
                                        plural: false,
                                        selections: [
                                            .field(NormalizationLinkedField(
                                                name: "edges",
                                                concreteType: "FilmCharactersEdge",
                                                plural: true,
                                                selections: [
                                                    .field(NormalizationLinkedField(
                                                        name: "node",
                                                        concreteType: "Person",
                                                        plural: false,
                                                        selections: [
                                                            .field(NormalizationScalarField(
                                                                name: "id"
                                                            )),
                                                            .field(NormalizationScalarField(
                                                                name: "name"
                                                            ))
                                                        ]
                                                    ))
                                                ]
                                            ))
                                        ]
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            params: RequestParameters(
                name: "MovieDetailNodeQuery",
                operationKind: .query,
                text: """
query MovieDetailNodeQuery(
  $id: ID!
) {
  node(id: $id) {
    __typename
    id
    ... on Film {
      episodeID
      title
      director
      releaseDate
      characterConnection(first: 3) {
        edges {
          node {
            id
            name
          }
        }
      }
    }
  }
}
"""
            )
        )
    }
}

extension MovieDetailNodeQuery {
    public struct Variables: VariableDataConvertible {
        public var id: String

        public init(id: String) {
            self.id = id
        }

        public var variableData: VariableData {
            [
                "id": id
            ]
        }
    }

    public init(id: String) {
        self.init(variables: .init(id: id))
    }
}

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.Query.WrappedValue where O == MovieDetailNodeQuery {
    public func get(id: String, fetchKey: Any? = nil) -> RelaySwiftUI.Query<MovieDetailNodeQuery>.Result {
        self.get(.init(id: id), fetchKey: fetchKey)
    }
}
#endif

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.RefetchableFragment.Wrapper where F.Operation == MovieDetailNodeQuery {
    public func refetch(id: String) {
        self.refetch(.init(id: id))
    }
}
#endif

extension MovieDetailNodeQuery {
    public struct Data: Decodable {
        public var node: Node_node?

        public enum Node_node: Decodable, Identifiable {
            case film(Film)
            case node(Node)

            private enum TypeKeys: String, CodingKey {
                case __typename
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: TypeKeys.self)
                let typeName = try container.decode(String.self, forKey: .__typename)
                switch typeName {
                case "Film":
                    self = .film(try Film(from: decoder))
                default:
                    self = .node(try Node(from: decoder))
                }
            }

            public var asFilm: Film? {
                if case .film(let val) = self {
                    return val
                }
                return nil
            }

            public var id: String {
                switch self {
                case .film(let val):
                    return val.id
                case .node(let val):
                    return val.id
                }
            }

            public struct Film: Decodable, Identifiable {
                public var id: String
                public var episodeID: Int?
                public var title: String?
                public var director: String?
                public var releaseDate: String?
                public var characterConnection: FilmCharactersConnection_characterConnection?

                public struct FilmCharactersConnection_characterConnection: Decodable {
                    public var edges: [FilmCharactersEdge_edges?]?

                    public struct FilmCharactersEdge_edges: Decodable {
                        public var node: Person_node?

                        public struct Person_node: Decodable, Identifiable {
                            public var id: String
                            public var name: String?
                        }
                    }
                }
            }

            public struct Node: Decodable, Identifiable {
                public var id: String
            }
        }
    }
}

extension MovieDetailNodeQuery: Relay.Operation {}