// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct ChangeTodoStatusMutation {
    public var variables: Variables

    public init(variables: Variables) {
        self.variables = variables
    }

    public static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "ChangeTodoStatusMutation",
                type: "Mutation",
                selections: [
                    .field(ReaderLinkedField(
                        name: "changeTodoStatus",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "ChangeTodoStatusPayload",
                        plural: false,
                        selections: [
                            .field(ReaderLinkedField(
                                name: "todo",
                                concreteType: "Todo",
                                plural: false,
                                selections: [
                                    .field(ReaderScalarField(
                                        name: "id"
                                    )),
                                    .field(ReaderScalarField(
                                        name: "complete"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            operation: NormalizationOperation(
                name: "ChangeTodoStatusMutation",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "changeTodoStatus",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "ChangeTodoStatusPayload",
                        plural: false,
                        selections: [
                            .field(NormalizationLinkedField(
                                name: "todo",
                                concreteType: "Todo",
                                plural: false,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "id"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "complete"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            params: RequestParameters(
                name: "ChangeTodoStatusMutation",
                operationKind: .mutation,
                text: """
mutation ChangeTodoStatusMutation(
  $input: ChangeTodoStatusInput!
) {
  changeTodoStatus(input: $input) {
    todo {
      id
      complete
    }
  }
}
"""
            )
        )
    }
}

extension ChangeTodoStatusMutation {
    public struct Variables: VariableDataConvertible {
        public var input: ChangeTodoStatusInput

        public init(input: ChangeTodoStatusInput) {
            self.input = input
        }

        public var variableData: VariableData {
            [
                "input": input
            ]
        }
    }

    public init(input: ChangeTodoStatusInput) {
        self.init(variables: .init(input: input))
    }
}

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.Query.WrappedValue where O == ChangeTodoStatusMutation {
    public func get(input: ChangeTodoStatusInput, fetchKey: Any? = nil) -> RelaySwiftUI.Query<ChangeTodoStatusMutation>.Result {
        self.get(.init(input: input), fetchKey: fetchKey)
    }
}
#endif

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.RefetchableFragment.Wrapper where F.Operation == ChangeTodoStatusMutation {
    public func refetch(input: ChangeTodoStatusInput) {
        self.refetch(.init(input: input))
    }
}
#endif

public struct ChangeTodoStatusInput: VariableDataConvertible {
    public var complete: Bool
    public var id: String
    public var userId: String
    public var clientMutationId: String?

    public init(complete: Bool, id: String, userId: String, clientMutationId: String? = nil) {
        self.complete = complete
        self.id = id
        self.userId = userId
        self.clientMutationId = clientMutationId
    }

    public var variableData: VariableData {
        [
            "complete": complete,
            "id": id,
            "userId": userId,
            "clientMutationId": clientMutationId
        ]
    }
}


extension ChangeTodoStatusMutation {
    public struct Data: Decodable {
        public var changeTodoStatus: ChangeTodoStatusPayload_changeTodoStatus?

        public struct ChangeTodoStatusPayload_changeTodoStatus: Decodable {
            public var todo: Todo_todo

            public struct Todo_todo: Decodable, Identifiable {
                public var id: String
                public var complete: Bool
            }
        }
    }
}

extension ChangeTodoStatusMutation: Relay.Operation {}